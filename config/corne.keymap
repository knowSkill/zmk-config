/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip { chain-length = <27>; };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        rgb_layer_combo {
            bindings = <&mo 4>;
            key-positions = <36 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB     &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I         &kp O    &kp P     &kp BSPC
&kp LCTRL   &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K         &kp L    &kp SEMI  &kp SQT
&kp LSHIFT  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA     &kp DOT  &kp FSLH  &kp ESC
                          &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp LEFT_ALT
            >;
        };

        lower_layer {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6        &kp N7  &kp N8  &kp N9  &kp N0    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp ASTERISK  &kp N4  &kp N5  &kp N6  &kp PLUS  &kp MINUS
&trans  &trans  &trans  &trans  &trans  &trans    &kp FSLH      &kp N1  &kp N2  &kp N3  &kp DOT   &kp EQUAL
                        &trans  &trans  &trans    &trans        &trans  &trans
            >;
        };

        raise_layer {
            bindings = <
&kp TILDE  &kp EXCL    &kp AT      &kp HASH    &kp DLLR          &kp PRCNT           &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp DEL
&trans     &kp C_PREV  &kp C_NEXT  &kp C_STOP  &kp C_PLAY_PAUSE  &kp C_VOL_UP        &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans     &trans      &trans      &trans      &trans            &kp LS(C_VOL_DN)    &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                   &trans      &trans            &trans              &trans     &trans     &trans
            >;
        };

        function_layer {
            bindings = <
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans    &trans    &kp INSERT  &kp HOME  &kp PAGE_UP    &trans  &kp DEL
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans    &kp LEFT  &kp DOWN    &kp UP    &kp RIGHT      &trans  &trans
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &trans    &kp DEL     &kp END   &kp PAGE_DOWN  &trans  &trans
                         &trans   &trans   &trans    &trans    &trans      &trans
            >;
        };

        rgb_layer {
            bindings = <
&rgb_ug RGB_OFF  &rgb_ug RGB_ON   &trans  &trans  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI    &rgb_ug RGB_COLOR_HSB(0,100,75)   &rgb_ug RGB_COLOR_HSB(65,100,75)  &rgb_ug RGB_COLOR_HSB(120,100,75)  &rgb_ug RGB_COLOR_HSB(180,100,75)  &rgb_ug RGB_COLOR_HSB(240,100,75)  &rgb_ug RGB_COLOR_HSB(302,100,75)
&rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &trans  &trans  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI    &rgb_ug RGB_COLOR_HSB(21,100,50)  &rgb_ug RGB_COLOR_HSB(81,100,50)  &rgb_ug RGB_COLOR_HSB(138,100,50)  &rgb_ug RGB_COLOR_HSB(196,100,50)  &rgb_ug RGB_COLOR_HSB(255,100,50)  &rgb_ug RGB_COLOR_HSB(324,100,50)
&rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &trans  &trans  &rgb_ug RGB_SPD  &rgb_ug RGB_SPI    &rgb_ug RGB_COLOR_HSB(43,100,25)  &rgb_ug RGB_COLOR_HSB(77,100,25)  &rgb_ug RGB_COLOR_HSB(153,100,25)  &rgb_ug RGB_COLOR_HSB(207,100,25)  &rgb_ug RGB_COLOR_HSB(266,100,25)  &rgb_ug RGB_COLOR_HSB(334,100,25)
                                          &trans  &trans           &trans             &trans                            &trans                            &trans
            >;
        };
    };
};
